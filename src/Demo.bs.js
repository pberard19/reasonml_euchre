// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Random = require("bs-platform/lib/js/random.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

console.log("Time to play some Euchre");

var seed = Date.now() | 0;

Random.init(seed);

function addToHand(myPlayer, myCard) {
  var arr = myPlayer.hand;
  if (arr) {
    return /* Cards */[$$Array.append(arr[0], [myCard])];
  } else {
    return /* Cards */[[myCard]];
  }
}

function getFromHand(myPlayer, cardPos) {
  var arr = myPlayer.hand;
  if (!arr) {
    return /* None */0;
  }
  var arr$1 = arr[0];
  if (cardPos < arr$1.length) {
    return /* Card */[Caml_array.caml_array_get(arr$1, cardPos)];
  } else {
    return /* None */0;
  }
}

function removeFromHand(myPlayer, cardPos) {
  var arr = myPlayer.hand;
  if (!arr) {
    return /* Cards */[[]];
  }
  var arr$1 = arr[0];
  if (cardPos < arr$1.length) {
    return /* Cards */[arr$1.splice(cardPos, 1)];
  } else {
    return /* Cards */[[]];
  }
}

function playFromHand(myPlayer, cardPos) {
  var cardToPlay = getFromHand(myPlayer, cardPos);
  removeFromHand(myPlayer, cardPos);
  return cardToPlay;
}

function isRightBower(trump, card) {
  switch (trump) {
    case /* Hearts */0 :
        if (card.suit === /* Hearts */0) {
          return card.value === 11;
        } else {
          return false;
        }
    case /* Diamonds */1 :
        if (card.suit === /* Diamonds */1) {
          return card.value === 11;
        } else {
          return false;
        }
    case /* Spades */2 :
        if (card.suit === /* Spades */2) {
          return card.value === 11;
        } else {
          return false;
        }
    case /* Clubs */3 :
        if (card.suit === /* Clubs */3) {
          return card.value === 11;
        } else {
          return false;
        }
    
  }
}

function isLeftBower(trump, card) {
  switch (trump) {
    case /* Hearts */0 :
        if (card.suit === /* Diamonds */1) {
          return card.value === 11;
        } else {
          return false;
        }
    case /* Diamonds */1 :
        if (card.suit === /* Hearts */0) {
          return card.value === 11;
        } else {
          return false;
        }
    case /* Spades */2 :
        if (card.suit === /* Clubs */3) {
          return card.value === 11;
        } else {
          return false;
        }
    case /* Clubs */3 :
        if (card.suit === /* Spades */2) {
          return card.value === 11;
        } else {
          return false;
        }
    
  }
}

function isTrump(trump, card) {
  if (card.suit === trump) {
    return true;
  } else {
    return isLeftBower(trump, card);
  }
}

function getValue(trump, card) {
  if (isRightBower(trump, card)) {
    return 16;
  } else if (isLeftBower(trump, card)) {
    return 15;
  } else {
    return card.value;
  }
}

function compareCards(trump, led, cardA, cardB) {
  if (isTrump(trump, cardA) || isTrump(trump, cardB)) {
    return getValue(trump, cardA) - getValue(trump, cardB) | 0;
  }
  if (cardA.suit === cardB.suit) {
    return getValue(trump, cardA) - getValue(trump, cardB) | 0;
  }
  if (!led) {
    return 0;
  }
  var suit = led[0];
  if (cardA.suit === suit) {
    return 1;
  } else if (cardB.suit === suit) {
    return -1;
  } else {
    return 0;
  }
}

function getCompFn(trump, led) {
  return (function (param, param$1) {
      return compareCards(trump, led, param, param$1);
    });
}

function sortHand(myHand, trump, led) {
  if (!myHand) {
    return /* Empty */0;
  }
  var arr = myHand[0];
  $$Array.stable_sort((function (param, param$1) {
          return compareCards(trump, led, param, param$1);
        }), arr);
  return /* Cards */[arr];
}

function getHighestTrump(myHand, trump) {
  if (!myHand) {
    return -1;
  }
  var arr = myHand[0];
  var maxPos = -1;
  var maxVal = -1;
  for(var idx = 0 ,idx_finish = arr.length; idx < idx_finish; ++idx){
    var cardVal = getValue(trump, Caml_array.caml_array_get(arr, idx));
    if (isTrump(trump, Caml_array.caml_array_get(arr, idx)) && cardVal > maxVal) {
      maxVal = cardVal;
      maxPos = idx;
    }
    
  }
  return maxPos;
}

function getHighestLed(myHand, trump, led) {
  if (!myHand) {
    return -1;
  }
  if (!led) {
    return -1;
  }
  var suit = led[0];
  var arr = myHand[0];
  var maxPos = -1;
  var maxVal = -1;
  for(var idx = 0 ,idx_finish = arr.length; idx < idx_finish; ++idx){
    var cardVal = getValue(trump, Caml_array.caml_array_get(arr, idx));
    if (Caml_array.caml_array_get(arr, idx).suit === suit && cardVal > maxVal) {
      maxVal = cardVal;
      maxPos = idx;
    }
    
  }
  return maxPos;
}

function getHighestNonTrump(myHand, trump) {
  if (!myHand) {
    return -1;
  }
  var arr = myHand[0];
  var maxPos = -1;
  var maxVal = -1;
  for(var idx = 0 ,idx_finish = arr.length; idx < idx_finish; ++idx){
    var cardVal = getValue(trump, Caml_array.caml_array_get(arr, idx));
    if (!isTrump(trump, Caml_array.caml_array_get(arr, idx)) && cardVal > maxVal) {
      maxVal = cardVal;
      maxPos = idx;
    }
    
  }
  return maxPos;
}

function getSuitString(mySuit) {
  switch (mySuit) {
    case /* Hearts */0 :
        return "♥ ";
    case /* Diamonds */1 :
        return "♦ ";
    case /* Spades */2 :
        return "♠ ";
    case /* Clubs */3 :
        return "♣ ";
    
  }
}

function getValueString(myValue) {
  switch (myValue) {
    case 9 :
        return "Nine";
    case 10 :
        return "Ten";
    case 11 :
        return "Jack";
    case 12 :
        return "Queen";
    case 13 :
        return "King";
    case 14 :
        return "Ace";
    case 15 :
        return "Left Bower";
    case 16 :
        return "Right Bower";
    default:
      return "You can't play a Get Out Of Jail Free Card in Euchre!";
  }
}

function cardToString(myCard) {
  return getValueString(myCard.value) + (" of " + getSuitString(myCard.suit));
}

function playedCardToString(myPlayedCard) {
  if (myPlayedCard) {
    return cardToString(myPlayedCard[0]);
  } else {
    return "Not a card";
  }
}

function playedCardsToString(arrOfPlayedCards) {
  return $$Array.map(playedCardToString, arrOfPlayedCards).join(", ");
}

function playerHandToString(myHand) {
  if (myHand) {
    return $$Array.map(cardToString, myHand[0]).join(", ");
  } else {
    return "0 Cards";
  }
}

function getPlayerName(myPlayer) {
  return "Player " + myPlayer.name;
}

function playerToString(myPlayer) {
  return "Player " + (myPlayer.name + (" has a hand of: " + playerHandToString(myPlayer.hand)));
}

function printDeck(myDeck) {
  return List.map((function (c) {
                console.log(cardToString(c));
                
              }), myDeck);
}

function printPlayers(players) {
  return $$Array.map((function (p) {
                console.log(playerToString(p));
                
              }), players);
}

function shuffleDeck(myDeck) {
  var newpositions = Belt_Array.shuffle([
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23
      ]);
  return $$Array.to_list($$Array.map((function (p) {
                    return List.nth(myDeck, p);
                  }), newpositions));
}

function dealHand(shuffledDeck, players) {
  return List.iter((function (dealTuple) {
                var playerPos = dealTuple[1];
                var drawOne = List.nth(shuffledDeck, dealTuple[0]);
                Caml_array.caml_array_get(players, playerPos).hand = addToHand(Caml_array.caml_array_get(players, playerPos), drawOne);
                
              }), /* :: */[
              /* tuple */[
                0,
                0
              ],
              /* :: */[
                /* tuple */[
                  1,
                  0
                ],
                /* :: */[
                  /* tuple */[
                    2,
                    0
                  ],
                  /* :: */[
                    /* tuple */[
                      3,
                      1
                    ],
                    /* :: */[
                      /* tuple */[
                        4,
                        1
                      ],
                      /* :: */[
                        /* tuple */[
                          5,
                          2
                        ],
                        /* :: */[
                          /* tuple */[
                            6,
                            2
                          ],
                          /* :: */[
                            /* tuple */[
                              7,
                              2
                            ],
                            /* :: */[
                              /* tuple */[
                                8,
                                3
                              ],
                              /* :: */[
                                /* tuple */[
                                  9,
                                  3
                                ],
                                /* :: */[
                                  /* tuple */[
                                    10,
                                    0
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      11,
                                      0
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        12,
                                        1
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          13,
                                          1
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            14,
                                            1
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              15,
                                              2
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                15,
                                                2
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  16,
                                                  3
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    17,
                                                    3
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      18,
                                                      3
                                                    ],
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var players = [
  {
    name: "A",
    position: 0,
    hand: /* Empty */0
  },
  {
    name: "B",
    position: 1,
    hand: /* Empty */0
  },
  {
    name: "C",
    position: 2,
    hand: /* Empty */0
  },
  {
    name: "D",
    position: 3,
    hand: /* Empty */0
  }
];

var teamAScore = {
  contents: 0
};

var teamBScore = {
  contents: 0
};

var deck = List.flatten(List.map((function (n) {
            return /* :: */[
                    {
                      suit: /* Spades */2,
                      value: n
                    },
                    /* :: */[
                      {
                        suit: /* Hearts */0,
                        value: n
                      },
                      /* :: */[
                        {
                          suit: /* Diamonds */1,
                          value: n
                        },
                        /* :: */[
                          {
                            suit: /* Clubs */3,
                            value: n
                          },
                          /* [] */0
                        ]
                      ]
                    ]
                  ];
          }), /* :: */[
          9,
          /* :: */[
            10,
            /* :: */[
              11,
              /* :: */[
                12,
                /* :: */[
                  13,
                  /* :: */[
                    14,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]));

function getPositionOfHighestCard(playedCards, trump, ledCard) {
  var led;
  if (ledCard) {
    var card = ledCard[0];
    console.log(getSuitString(card.suit) + " was led");
    led = /* Suit */[card.suit];
  } else {
    led = /* NoSuit */0;
  }
  var tempPlayer = {
    name: "TEMP",
    position: 99,
    hand: /* Empty */0
  };
  for(var idx = 0 ,idx_finish = playedCards.length; idx < idx_finish; ++idx){
    var card$1 = Caml_array.caml_array_get(playedCards, idx);
    if (card$1) {
      tempPlayer.hand = addToHand(tempPlayer, card$1[0]);
      tempPlayer.hand;
    }
    
  }
  var positionOfHighestTrump = getHighestTrump(tempPlayer.hand, trump);
  if (positionOfHighestTrump >= 0) {
    return positionOfHighestTrump;
  } else {
    return getHighestLed(tempPlayer.hand, trump, led);
  }
}

function playCard(player, trump, playedCards, ledCard) {
  var ledSuit = ledCard ? /* Suit */[ledCard[0].suit] : /* NoSuit */0;
  if (ledSuit === /* NoSuit */0) {
    var positionOfHighestNonTrump = getHighestNonTrump(player.hand, trump);
    if (positionOfHighestNonTrump >= 0) {
      return playFromHand(player, positionOfHighestNonTrump);
    }
    var positionOfHighestTrump = getHighestTrump(player.hand, trump);
    return playFromHand(player, positionOfHighestTrump);
  }
  var positionOfHighestLedSuit = getHighestLed(player.hand, trump, ledSuit);
  if (positionOfHighestLedSuit >= 0) {
    return playFromHand(player, positionOfHighestLedSuit);
  }
  var positionOfHighestTrump$1 = getHighestTrump(player.hand, trump);
  if (positionOfHighestTrump$1 >= 0) {
    return playFromHand(player, positionOfHighestTrump$1);
  }
  var positionOfHighestNonTrump$1 = getHighestNonTrump(player.hand, trump);
  return playFromHand(player, positionOfHighestNonTrump$1);
}

function playTrick(players, trump, leader) {
  console.log("Playing trick - " + (getSuitString(trump) + " are trump"));
  var playOrder = [
    leader,
    (leader + 1 | 0) % 4,
    (leader + 2 | 0) % 4,
    (leader + 3 | 0) % 4
  ];
  var playedCards = [];
  var playedCards$1 = $$Array.append(playedCards, [playCard(Caml_array.caml_array_get(players, Caml_array.caml_array_get(playOrder, 0)), trump, playedCards, /* None */0)]);
  var ledCard = Caml_array.caml_array_get(playedCards$1, 0);
  var playedCards$2 = $$Array.append(playedCards$1, [playCard(Caml_array.caml_array_get(players, Caml_array.caml_array_get(playOrder, 1)), trump, playedCards$1, ledCard)]);
  var playedCards$3 = $$Array.append(playedCards$2, [playCard(Caml_array.caml_array_get(players, Caml_array.caml_array_get(playOrder, 2)), trump, playedCards$2, ledCard)]);
  var playedCards$4 = $$Array.append(playedCards$3, [playCard(Caml_array.caml_array_get(players, Caml_array.caml_array_get(playOrder, 3)), trump, playedCards$3, ledCard)]);
  console.log(playedCardsToString(playedCards$4));
  var winningCardPos = getPositionOfHighestCard(playedCards$4, trump, ledCard);
  console.log("Winning card: " + playedCardToString(Caml_array.caml_array_get(playedCards$4, winningCardPos)));
  return Caml_array.caml_array_get(playOrder, winningCardPos);
}

function scoreTrick(teamThatCalledTrump, teamATricks, teamBTricks, teamAWentAlone, teamBWentAlone) {
  if (teamThatCalledTrump === 0) {
    if (teamAWentAlone) {
      if (teamATricks > 4 || teamATricks < 0) {
        if (teamATricks === 5 && teamBTricks === 0) {
          return /* tuple */[
                  0,
                  4
                ];
        }
        
      } else if (teamATricks >= 3) {
        if (teamBTricks === 2 || teamBTricks === 1) {
          return /* tuple */[
                  0,
                  1
                ];
        }
        
      } else if (!(teamBTricks > 5 || teamBTricks < 3)) {
        return /* tuple */[
                1,
                2
              ];
      }
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Demo.re",
              351,
              24
            ]
          ];
    }
    if (teamATricks > 4 || teamATricks < 0) {
      if (teamATricks === 5 && teamBTricks === 0) {
        return /* tuple */[
                0,
                2
              ];
      }
      
    } else if (teamATricks >= 3) {
      if (teamBTricks === 2 || teamBTricks === 1) {
        return /* tuple */[
                0,
                1
              ];
      }
      
    } else if (!(teamBTricks > 5 || teamBTricks < 3)) {
      return /* tuple */[
              1,
              2
            ];
    }
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Demo.re",
            357,
            11
          ]
        ];
  }
  if (teamBWentAlone) {
    if (teamBTricks > 4 || teamBTricks < 0) {
      if (teamBTricks === 5 && teamATricks === 0) {
        return /* tuple */[
                1,
                4
              ];
      }
      
    } else if (teamBTricks >= 3) {
      if (teamATricks === 2 || teamATricks === 1) {
        return /* tuple */[
                1,
                1
              ];
      }
      
    } else if (!(teamATricks > 5 || teamATricks < 3)) {
      return /* tuple */[
              0,
              2
            ];
    }
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Demo.re",
            365,
            23
          ]
        ];
  }
  if (teamBTricks > 4 || teamBTricks < 0) {
    if (teamBTricks === 5 && teamATricks === 0) {
      return /* tuple */[
              1,
              2
            ];
    }
    
  } else if (teamBTricks >= 3) {
    if (teamATricks === 2 || teamATricks === 1) {
      return /* tuple */[
              1,
              1
            ];
    }
    
  } else if (!(teamATricks > 5 || teamATricks < 3)) {
    return /* tuple */[
            0,
            2
          ];
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "Demo.re",
          371,
          11
        ]
      ];
}

function playTurn(players, shuffled) {
  dealHand(shuffled, players);
  var teamATricks = 0;
  var teamBTricks = 0;
  console.log("Playing round with players:");
  for(var playerNum = 0; playerNum <= 3; ++playerNum){
    sortHand(Caml_array.caml_array_get(players, playerNum).hand, /* Hearts */0, /* NoSuit */0);
  }
  printPlayers(players);
  console.log("\n");
  for(var roundNum = 0; roundNum <= 4; ++roundNum){
    var winningPlayer = playTrick(players, /* Hearts */0, 0);
    if (winningPlayer % 2 === 0) {
      teamATricks = teamATricks + 1 | 0;
    } else {
      teamBTricks = teamBTricks + 1 | 0;
    }
    console.log("Winning Player: Player " + Caml_array.caml_array_get(players, winningPlayer).name);
    console.log("\n");
  }
  return scoreTrick(0, teamATricks, teamBTricks, false, false);
}

function playGame(players, deck) {
  while(teamAScore.contents < 10 && teamBScore.contents < 10) {
    console.log("Team A points: ");
    console.log(teamAScore.contents);
    console.log("Team B points: ");
    console.log(teamBScore.contents);
    var match = playTurn(players, shuffleDeck(deck));
    var score = match[1];
    if (match[0] === 0) {
      teamAScore.contents = teamAScore.contents + score | 0;
    } else {
      teamBScore.contents = teamBScore.contents + score | 0;
    }
  };
  if (teamAScore.contents >= 10) {
    console.log("Congratulations to team A!");
    return ;
  } else {
    console.log("Congratulations to team B!");
    return ;
  }
}

playGame(players, deck);

var A;

var teamA = 0;

var teamB = 1;

exports.A = A;
exports.seed = seed;
exports.addToHand = addToHand;
exports.getFromHand = getFromHand;
exports.removeFromHand = removeFromHand;
exports.playFromHand = playFromHand;
exports.isRightBower = isRightBower;
exports.isLeftBower = isLeftBower;
exports.isTrump = isTrump;
exports.getValue = getValue;
exports.compareCards = compareCards;
exports.getCompFn = getCompFn;
exports.sortHand = sortHand;
exports.getHighestTrump = getHighestTrump;
exports.getHighestLed = getHighestLed;
exports.getHighestNonTrump = getHighestNonTrump;
exports.getSuitString = getSuitString;
exports.getValueString = getValueString;
exports.cardToString = cardToString;
exports.playedCardToString = playedCardToString;
exports.playedCardsToString = playedCardsToString;
exports.playerHandToString = playerHandToString;
exports.getPlayerName = getPlayerName;
exports.playerToString = playerToString;
exports.printDeck = printDeck;
exports.printPlayers = printPlayers;
exports.shuffleDeck = shuffleDeck;
exports.dealHand = dealHand;
exports.players = players;
exports.teamA = teamA;
exports.teamB = teamB;
exports.teamAScore = teamAScore;
exports.teamBScore = teamBScore;
exports.deck = deck;
exports.getPositionOfHighestCard = getPositionOfHighestCard;
exports.playCard = playCard;
exports.playTrick = playTrick;
exports.scoreTrick = scoreTrick;
exports.playTurn = playTurn;
exports.playGame = playGame;
/*  Not a pure module */
